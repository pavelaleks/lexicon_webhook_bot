import asyncio
import logging
import os

from aiohttp import web
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import (
    Message, CallbackQuery, FSInputFile, BotCommand,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from dotenv import load_dotenv

from keyboards import (
    forward_kb, start_options_kb, courses_kb,
    course_summer_kb, course_russian_kb, course_exams_kb
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8080))

from aiogram.client.default import DefaultBotProperties

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    photo = FSInputFile("lesha.jpg")
    await message.answer_photo(
        photo=photo,
        caption="<b>\U0001F44B –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>\n\n"
                "–ú–µ–Ω—è –∑–æ–≤—É—Ç –õ—ë—à–∞ –ë—É–∫–æ–≤–∫–∏–Ω ‚Äî —è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –°—Ç—É–¥–∏–∏ ¬´–õ–µ–∫—Å–∏–∫–æ–Ω¬ª!\n"
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–í–ø–µ—Ä—ë–¥¬ª, –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, —á–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω.",
        reply_markup=forward_kb
    )

@dp.callback_query(F.data == "start_more")
async def continue_start(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "<b>–ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:</b>\n\n"
        "‚Ä¢ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–∞—à–∏—Ö –∫—É—Ä—Å–∞—Ö –∏ –∫—Ä—É–∂–∫–∞—Ö\n"
        "‚Ä¢ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å –≤–∞—Å —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º —Å—Ç—É–¥–∏–∏\n"
        "‚Ä¢ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –ü–∞–≤–ª—É –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á—É –ê–ª–µ–∫—Å–µ–µ–≤—É\n\n"
        "\U0001F447 –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=start_options_kb
    )

@dp.callback_query(F.data == "about_director")
async def about_director(callback: CallbackQuery):
    await callback.answer()
    photo = FSInputFile("alekseev-2.jpg")
    await callback.message.answer_photo(
        photo=photo,
        caption="<b>–ü–∞–≤–µ–ª –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á –ê–ª–µ–∫—Å–µ–µ–≤</b> ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä, —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ç—É–¥–∏–∏ ¬´–õ–µ–∫—Å–∏–∫–æ–Ω¬ª, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –ì–ê–ì–£.\n\n"
                "\U0001F4DA –î–æ–∫—Ç–æ—Ä —Ñ–∏–ª–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –Ω–∞—É–∫, –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, –∞–≤—Ç–æ—Ä –∫—É—Ä—Å–æ–≤ –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ.\n\n"
                "–ù–∏–∂–µ ‚Äî —Å—Å—ã–ª–∫–∏, –≥–¥–µ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="\U0001F310 –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–∞–π—Ç", url="https://palekseev.ru")],
            [InlineKeyboardButton(text="\U0001F3DB –ù–∞ —Å–∞–π—Ç–µ –ì–ê–ì–£", url="https://www.gasu.ru/university/faculty_and_staff/2296/")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="start_more")]
        ])
    )

@dp.callback_query(F.data == "show_courses")
@dp.message(F.text == "/courses")
async def show_courses(event: CallbackQuery | Message):
    if isinstance(event, CallbackQuery):
        await event.answer()
        msg = event.message
    else:
        msg = event
    await msg.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫—É—Ä—Å:</b>", reply_markup=courses_kb)

@dp.callback_query(F.data == "course_summer")
async def show_course_summer(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "<b>\U0001F31E –õ–µ—Ç–Ω—è—è —è–∑—ã–∫–æ–≤–∞—è —à–∫–æ–ª–∞ ¬´–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è —Å –õ—ë—à–µ–π –ë—É–∫–æ–≤–∫–∏–Ω—ã–º¬ª</b>\n\n...",  # –°–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        reply_markup=course_summer_kb
    )

@dp.callback_query(F.data == "course_russian")
async def show_course_russian(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("<b>\U0001F4D8 –ö—É—Ä—Å ¬´–†—É—Å—Å–∫–∏–π –Ω–∞ –æ—Ç–ª–∏—á–Ω–æ!¬ª</b>\n\n...", reply_markup=course_russian_kb)

@dp.callback_query(F.data == "course_exams")
async def show_course_exams(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("<b>\U0001F4DA –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –û–ì–≠ –∏ –ï–ì–≠</b>\n\n...", reply_markup=course_exams_kb)

@dp.callback_query(F.data.startswith("signup_course_"))
async def handle_signup(callback: CallbackQuery):
    user = callback.from_user
    course_name = {
        "signup_course_summer": "–õ–µ—Ç–Ω—è—è —à–∫–æ–ª–∞",
        "signup_course_russian": "–†—É—Å—Å–∫–∏–π –Ω–∞ –æ—Ç–ª–∏—á–Ω–æ!",
        "signup_course_exams": "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –û–ì–≠/–ï–ì–≠"
    }.get(callback.data, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫—É—Ä—Å")
    message_text = (
        f"<b>–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å:</b> {course_name}\n"
        f"–û—Ç: @{user.username or '–±–µ–∑ username'} (id: {user.id})"
    )
    await bot.send_message(chat_id=ADMIN_ID, text=message_text)
    await callback.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞.")

@dp.message(F.text == "/about")
async def about_command(message: Message):
    await message.answer("<b>–°—Ç—É–¥–∏—è ¬´–õ–µ–∫—Å–∏–∫–æ–Ω¬ª</b>\n\n...")

@dp.message(F.text == "/location")
async def location_command(message: Message):
    await message.answer("üìç –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: ...", disable_web_page_preview=True)

@dp.callback_query(F.data == "signup_direct")
@dp.message(F.text == "/signup")
async def signup_direct(event: CallbackQuery | Message):
    if isinstance(event, CallbackQuery):
        await event.answer()
        msg = event.message
    else:
        msg = event
    await msg.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π –∫—É—Ä—Å —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ‚Äî –∏ —è –ø–µ—Ä–µ–¥–∞–º —ç—Ç–æ –ü–∞–≤–ª—É –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á—É.")

@dp.callback_query(F.data == "write_direct")
@dp.message(F.text == "/write")
async def write_direct(event: CallbackQuery | Message):
    if isinstance(event, CallbackQuery):
        await event.answer()
        msg = event.message
    else:
        msg = event
    await msg.answer("üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å ‚Äî –∏ –ü–∞–≤–µ–ª –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º –ª–∏—á–Ω–æ.")

@dp.message()
async def forward_message(message: Message):
    user = message.from_user
    text = f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{user.username or '–±–µ–∑ username'}:</b>\n\n{message.text}"
    try:
        await bot.send_message(chat_id=ADMIN_ID, text=text)
        await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ.")
    except Exception:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# Webhook
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)
    await bot.set_my_commands([
        BotCommand(command="start", description="üìç –°—Ç–∞—Ä—Ç"),
        BotCommand(command="courses", description="üìö –ö—É—Ä—Å—ã"),
        BotCommand(command="about", description="‚ÑπÔ∏è –û —Å—Ç—É–¥–∏–∏"),
        BotCommand(command="write", description="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é"),
        BotCommand(command="location", description="üìç –ì–¥–µ –Ω–∞—Å –Ω–∞–π—Ç–∏"),
    ])

async def on_shutdown(app):
    await bot.delete_webhook()
    await bot.session.close()

async def create_app():
    app = web.Application()
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path="/webhook")
    setup_application(app, dp, bot=bot)
    return app

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    web.run_app(create_app(), port=PORT)
